# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cCOGtMJSv2L1g4CwjNGLfP-JYDg_KvhM
"""

# app.py
import io
import random
import math
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st

# ---- Page & sidebar ----
st.set_page_config(page_title="Generative Abstract Poster", layout="centered")
st.title("Generative Abstract Poster")
st.caption("Week 2 • Arts and Advanced Big Data • Made by Boyang Wang")

with st.sidebar:
    st.header("Parameters")
    seed_mode = st.radio("Random seed", ["Random each run", "Fixed value"], index=0)
    seed_value = st.number_input("Fixed seed value", value=42, step=1)
    n_layers = st.slider("Number of layers (n_layers)", 1, 40, 12)
    palette_k = st.slider("Palette size (k)", 2, 64, 16)
    r_min, r_max = st.slider("Radius range (rr)", 0.05, 0.60, (0.20, 0.30))
    wobble_min, wobble_max = st.slider("Wobble range", 0.00, 0.60, (0.10, 0.30))
    alpha_min, alpha_max = st.slider("Alpha range", 0.05, 1.00, (0.25, 0.60))
    points = st.slider("Outline points (resolution)", 50, 800, 200)
    figsize_w = st.slider("Figure width (inches)", 4, 12, 7)
    figsize_h = st.slider("Figure height (inches)", 4, 16, 10)
    dpi = st.slider("DPI", 72, 600, 300)

def random_palette(k=10):
    """Return k random RGB tuples in [0,1]."""
    return [(random.random(), random.random(), random.random()) for _ in range(k)]

def blob(center=(0.3, 0.3), r=0.3, points=200, wobble=0.15):
    """Generate a wobbly closed shape centered at `center`."""
    angles = np.linspace(0, 2 * math.pi, points)
    radii = r * (1 + wobble * (np.random.rand(points) - 0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

# ---- Randomness control ----
if seed_mode == "Fixed value":
    random.seed(int(seed_value))
    np.random.seed(int(seed_value))
else:
    random.seed()           # time-based
    np.random.seed(None)

# ---- Draw poster ----
fig = plt.figure(figsize=(figsize_w, figsize_h), dpi=dpi)
ax = plt.gca()
ax.set_axis_off()
ax.set_facecolor((0.98, 0.98, 0.97))

palette = random_palette(palette_k)

for _ in range(n_layers):
    cx, cy = random.random(), random.random()
    rr = random.uniform(r_min, r_max)
    wb = random.uniform(wobble_min, wobble_max)
    x, y = blob(center=(cx, cy), r=rr, points=points, wobble=wb)
    color = random.choice(palette)
    alpha = random.uniform(alpha_min, alpha_max)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0, 0, 0, 0))

# Poster label
plt.text(0.05, 0.90, "Generative Poster", fontsize=18, weight="bold", transform=ax.transAxes)
plt.text(0.05, 0.86, "Week 2 • Made by Boyang Wang", fontsize=11, transform=ax.transAxes)
plt.text(0.05, 0.83, "Arts and Advanced Big Data", fontsize=11, transform=ax.transAxes)
plt.xlim(0, 1); plt.ylim(0, 1)

st.pyplot(fig, use_container_width=True)

# ---- Download as PNG ----
buf = io.BytesIO()
fig.savefig(buf, format="png", bbox_inches="tight", dpi=dpi)
st.download_button("Download PNG", data=buf.getvalue(),
                   file_name="generative_poster.png", mime="image/png")